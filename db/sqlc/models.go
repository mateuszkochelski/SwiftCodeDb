// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type BankType string

const (
	BankTypeHeadquarter BankType = "headquarter"
	BankTypeBranch      BankType = "branch"
)

func (e *BankType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BankType(s)
	case string:
		*e = BankType(s)
	default:
		return fmt.Errorf("unsupported scan type for BankType: %T", src)
	}
	return nil
}

type NullBankType struct {
	BankType BankType `json:"bank_type"`
	Valid    bool     `json:"valid"` // Valid is true if BankType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBankType) Scan(value interface{}) error {
	if value == nil {
		ns.BankType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BankType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBankType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BankType), nil
}

type Bank struct {
	ID              int64          `json:"id"`
	SwiftCode       string         `json:"swift_code"`
	BankName        string         `json:"bank_name"`
	BankAddress     sql.NullString `json:"bank_address"`
	CountryIso2Code string         `json:"country_iso2_code"`
	Country         string         `json:"country"`
	BankType        BankType       `json:"bank_type"`
}
