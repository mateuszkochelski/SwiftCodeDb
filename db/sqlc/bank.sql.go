// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bank.sql

package db

import (
	"context"
	"database/sql"
)

const createBank = `-- name: CreateBank :one
INSERT INTO banks (
    swift_code,
    bank_name,
    bank_address,
    country_code,
    bank_type
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, swift_code, bank_name, bank_address, country_code, bank_type
`

type CreateBankParams struct {
	SwiftCode   string         `json:"swift_code"`
	BankName    string         `json:"bank_name"`
	BankAddress sql.NullString `json:"bank_address"`
	CountryCode string         `json:"country_code"`
	BankType    BankType       `json:"bank_type"`
}

func (q *Queries) CreateBank(ctx context.Context, arg CreateBankParams) (Bank, error) {
	row := q.db.QueryRowContext(ctx, createBank,
		arg.SwiftCode,
		arg.BankName,
		arg.BankAddress,
		arg.CountryCode,
		arg.BankType,
	)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.SwiftCode,
		&i.BankName,
		&i.BankAddress,
		&i.CountryCode,
		&i.BankType,
	)
	return i, err
}

const deleteBankBySwiftCode = `-- name: DeleteBankBySwiftCode :exec
DELETE FROM banks
WHERE $1 = swift_code
`

func (q *Queries) DeleteBankBySwiftCode(ctx context.Context, swiftCode string) error {
	_, err := q.db.ExecContext(ctx, deleteBankBySwiftCode, swiftCode)
	return err
}

const getBankBySwiftCodeWithCountry = `-- name: GetBankBySwiftCodeWithCountry :one
SELECT b.swift_code, b.bank_name, b.bank_address, b.country_code, c.country_name, b.bank_type FROM banks as b 
INNER JOIN countries as c ON b.country_code = c.country_code
WHERE swift_code = $1 LIMIT 1
`

type GetBankBySwiftCodeWithCountryRow struct {
	SwiftCode   string         `json:"swift_code"`
	BankName    string         `json:"bank_name"`
	BankAddress sql.NullString `json:"bank_address"`
	CountryCode string         `json:"country_code"`
	CountryName string         `json:"country_name"`
	BankType    BankType       `json:"bank_type"`
}

func (q *Queries) GetBankBySwiftCodeWithCountry(ctx context.Context, swiftCode string) (GetBankBySwiftCodeWithCountryRow, error) {
	row := q.db.QueryRowContext(ctx, getBankBySwiftCodeWithCountry, swiftCode)
	var i GetBankBySwiftCodeWithCountryRow
	err := row.Scan(
		&i.SwiftCode,
		&i.BankName,
		&i.BankAddress,
		&i.CountryCode,
		&i.CountryName,
		&i.BankType,
	)
	return i, err
}

const getBanksBranchesBySwiftCodePrefix = `-- name: GetBanksBranchesBySwiftCodePrefix :many
SELECT b.swift_code, b.bank_name, b.bank_address, b.country_code, b.bank_type FROM banks as b 
WHERE swift_code like $1 AND swift_code != $2
`

type GetBanksBranchesBySwiftCodePrefixParams struct {
	SwiftCode   string `json:"swift_code"`
	SwiftCode_2 string `json:"swift_code_2"`
}

type GetBanksBranchesBySwiftCodePrefixRow struct {
	SwiftCode   string         `json:"swift_code"`
	BankName    string         `json:"bank_name"`
	BankAddress sql.NullString `json:"bank_address"`
	CountryCode string         `json:"country_code"`
	BankType    BankType       `json:"bank_type"`
}

func (q *Queries) GetBanksBranchesBySwiftCodePrefix(ctx context.Context, arg GetBanksBranchesBySwiftCodePrefixParams) ([]GetBanksBranchesBySwiftCodePrefixRow, error) {
	rows, err := q.db.QueryContext(ctx, getBanksBranchesBySwiftCodePrefix, arg.SwiftCode, arg.SwiftCode_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBanksBranchesBySwiftCodePrefixRow
	for rows.Next() {
		var i GetBanksBranchesBySwiftCodePrefixRow
		if err := rows.Scan(
			&i.SwiftCode,
			&i.BankName,
			&i.BankAddress,
			&i.CountryCode,
			&i.BankType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBanksByCountryCode = `-- name: GetBanksByCountryCode :many
SELECT b.swift_code, b.bank_name, b.bank_address, b.country_code, b.bank_type FROM banks as b
WHERE b.country_code = $1
`

type GetBanksByCountryCodeRow struct {
	SwiftCode   string         `json:"swift_code"`
	BankName    string         `json:"bank_name"`
	BankAddress sql.NullString `json:"bank_address"`
	CountryCode string         `json:"country_code"`
	BankType    BankType       `json:"bank_type"`
}

func (q *Queries) GetBanksByCountryCode(ctx context.Context, countryCode string) ([]GetBanksByCountryCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getBanksByCountryCode, countryCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBanksByCountryCodeRow
	for rows.Next() {
		var i GetBanksByCountryCodeRow
		if err := rows.Scan(
			&i.SwiftCode,
			&i.BankName,
			&i.BankAddress,
			&i.CountryCode,
			&i.BankType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
