// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: countries.sql

package db

import (
	"context"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
    country_code,
    country_name
) VALUES (
    $1, $2
) ON CONFLICT (country_code) DO NOTHING RETURNING country_code, country_name
`

type CreateCountryParams struct {
	CountryCode string `json:"country_code"`
	CountryName string `json:"country_name"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry, arg.CountryCode, arg.CountryName)
	var i Country
	err := row.Scan(&i.CountryCode, &i.CountryName)
	return i, err
}

const getCountry = `-- name: GetCountry :one
SELECT country_code, country_name FROM countries
WHERE country_code = $1
`

func (q *Queries) GetCountry(ctx context.Context, countryCode string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountry, countryCode)
	var i Country
	err := row.Scan(&i.CountryCode, &i.CountryName)
	return i, err
}
